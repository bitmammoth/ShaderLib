[gd_resource type="VisualShader" load_steps=24 format=2]

[ext_resource path="res://shaders/hologram/HologramLines_Cool.png" type="Texture" id=1]
[ext_resource path="res://shaders/hologram/noise.tres" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "shaderSpeed"

[sub_resource type="VisualShaderNodeFresnel" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorUniform" id=6]
output_port_for_preview = 0
uniform_name = "fresnelColor"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "ShaderColor"

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=14]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 0.5

[sub_resource type="VisualShaderNodeTexture" id=17]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeVectorDecompose" id=21]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 ShaderColor : hint_color;
uniform float shaderSpeed;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_28;
uniform vec4 fresnelColor : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = ShaderColor.rgb;
	float n_out2p1 = ShaderColor.a;

// Input:6
	vec3 n_out6p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:9
	float n_out9p0 = n_out6p0.x;
	float n_out9p1 = n_out6p0.y;
	float n_out9p2 = n_out6p0.z;

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:12
	float n_in12p1 = 10.00000;
	float n_out12p0 = n_out7p0 / n_in12p1;

// ScalarUniform:13
	float n_out13p0 = shaderSpeed;

// ScalarOp:11
	float n_out11p0 = n_out12p0 * n_out13p0;

// ScalarOp:10
	float n_out10p0 = n_out11p0 + n_out9p1;

// VectorCompose:8
	vec3 n_out8p0 = vec3(n_out9p0, n_out10p0, n_out9p2);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out8p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Scalar:3
	float n_out3p0 = 0.500000;

// Input:24
	float n_out24p0 = TIME;

// ScalarOp:29
	float n_in29p1 = 2.00000;
	float n_out29p0 = n_out24p0 / n_in29p1;

// Texture:28
	vec4 tex_frg_28_read = texture(tex_frg_28, vec3(n_out29p0).xy);
	vec3 n_out28p0 = tex_frg_28_read.rgb;
	float n_out28p1 = tex_frg_28_read.a;

// VectorOp:19
	vec3 n_in19p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out19p0 = n_out4p0 + n_in19p1;

// VectorOp:20
	vec3 n_out20p0 = n_out2p0 * n_out19p0;

// ColorUniform:17
	vec3 n_out17p0 = fresnelColor.rgb;
	float n_out17p1 = fresnelColor.a;

// Fresnel:16
	bool n_in16p2 = false;
	float n_in16p3 = 1.00000;
	float n_out16p0 = n_in16p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in16p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in16p3));

// VectorOp:18
	vec3 n_out18p0 = n_out17p0 * vec3(n_out16p0);

// VectorOp:21
	vec3 n_out21p0 = n_out20p0 + n_out18p0;

// VectorOp:27
	vec3 n_out27p0 = n_out28p0 * n_out21p0;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333));
	ROUGHNESS = n_out3p0;
	EMISSION = n_out27p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1057, 478.625 )
nodes/fragment/0/position = Vector2( 380, 140 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -280, 160 )
nodes/fragment/3/node = SubResource( 16 )
nodes/fragment/3/position = Vector2( 140, 220 )
nodes/fragment/4/node = SubResource( 17 )
nodes/fragment/4/position = Vector2( -460, -60 )
nodes/fragment/6/node = SubResource( 18 )
nodes/fragment/6/position = Vector2( -1320, 60 )
nodes/fragment/7/node = SubResource( 19 )
nodes/fragment/7/position = Vector2( -1440, 160 )
nodes/fragment/8/node = SubResource( 20 )
nodes/fragment/8/position = Vector2( -700, 40 )
nodes/fragment/9/node = SubResource( 21 )
nodes/fragment/9/position = Vector2( -1100, 40 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -880, 140 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1060, 140 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1240, 140 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1260, 260 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( -460, 1040 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -360, 820 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -120, 880 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( -280, 400 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -60, 440 )
nodes/fragment/21/node = SubResource( 11 )
nodes/fragment/21/position = Vector2( 140, 720 )
nodes/fragment/24/node = SubResource( 12 )
nodes/fragment/24/position = Vector2( -1120, 560 )
nodes/fragment/27/node = SubResource( 13 )
nodes/fragment/27/position = Vector2( 140, 500 )
nodes/fragment/28/node = SubResource( 14 )
nodes/fragment/28/position = Vector2( -600, 520 )
nodes/fragment/29/node = SubResource( 15 )
nodes/fragment/29/position = Vector2( -826, 623.625 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 3, 6, 0, 9, 0, 9, 0, 8, 0, 9, 2, 8, 2, 8, 0, 4, 0, 10, 0, 8, 1, 9, 1, 10, 1, 11, 0, 10, 0, 7, 0, 12, 0, 12, 0, 11, 0, 13, 0, 11, 1, 16, 0, 18, 1, 17, 0, 18, 0, 4, 0, 0, 1, 4, 0, 19, 0, 2, 0, 20, 0, 19, 0, 20, 1, 20, 0, 21, 0, 18, 0, 21, 1, 21, 0, 27, 1, 27, 0, 0, 5, 24, 0, 29, 0, 29, 0, 28, 0, 28, 0, 27, 0 )
